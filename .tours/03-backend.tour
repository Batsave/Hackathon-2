{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "03: Backend",
  "steps": [
    {
      "file": "backend/index.js",
      "description": "Aaah, the `backend` folder ! \n\n_Before we begin, a fair warning: it's a bit more advanced than what you've seen previously, so don't dive in there too soon or you may get overwhelmed!_\n\nStill there ? Okay, here we go !",
      "line": 1
    },
    {
      "file": "backend/index.js",
      "description": "The first file you'll run through is the global `index.js`\nIt's just there to set things in motion, and we'll write very few lines of code here:\n- We set environment variables (Hello `.dotenv` !)\n- We call the `src/app.js` file (that's our Express app, more on that in a few seconds)\n- We make our app start listening on a specific port (otherwise, even with the best code in the world it would do absolutely nothing)",
      "line": 12
    },
    {
      "file": "backend/src/app.js",
      "description": "In the `src/app.js` file, we set up Express and app-wise middlewares (bits of code which are independent from our routes). Each part has its own purpose, and sooner or later you will have to read each of them :p",
      "line": 5
    },
    {
      "file": "backend/src/app.js",
      "description": "We also call for `src/router.js`, our next stop...",
      "line": 91
    },
    {
      "file": "backend/src/router.js",
      "description": "Here, we'll specify which routes are available, and what each of them does.\n\nFor the sake of readability, we don't detail route logic here, but instead link to methods situated in *controllers*.\n\nFor example, if your client calls a \"GET /items/17\", the request will be redirected to the \"read\" method in the `src/controllers/itemControllers.js` file.",
      "line": 16
    },
    {
      "file": "backend/src/controllers/itemControllers.js",
      "description": "Ah, here we are!\n\nThis \"read\" method in `src/controlles/itemControllers.js` is a classic Express route handler: given a request (`req`) and a response (`res`) variables, it'll execute code and try to satisfy your clients demands",
      "line": 19
    },
    {
      "file": "backend/src/controllers/itemControllers.js",
      "description": "Every route handler's goal is to `res.send` something, be it useful data or a status code. Here you may see we have several possibilities:\n- If we found the item our client requested (remember the \"GET /items/17\" call ?), we send it\n- If we did not find it, we send a 404 (\"Content not found\") status\n- If something goes wrong (MySQL global error, syntax typo ,...) we pass the error to `next` so Express handles it: by default, it will send a 500 (\"Internal server error\") code (we don't want potential attackers to know what broke !)",
      "line": 26
    },
    {
      "file": "backend/src/controllers/itemControllers.js",
      "description": "Now, I'm speaking about MySQL errors but there are no `SELECT * FROM item` queries here, there's just this `tables.item.read()` call...\n\n We're looking into the `tables` object, for a value called `item` on which we call a `read` method...\n\n Maybe this will make more sense after looking at the `src/tables.js` file!",
      "line": 22
    },
    {
      "file": "backend/src/tables.js",
      "description": "Ok! Here we are preparing so-called \"managers\" to fill the `tables` object. \n\nThat's normal, because your requests are done using a _Model_ of your target (in our journey, an item). So we'll have to go to the `src/models/ItemManager.js` file!",
      "line": 8
    },
    {
      "file": "backend/src/models/ItemManager.js",
      "description": "Ah, here we are, we found our SQL queries!\n\nAs you can see, every method here is dead simple: \"do something with the DB, and return the result\".\nThat allows us to regroup **all** our queries in specialized files. This is easier to maintain.",
      "line": 28
    },
    {
      "file": "backend/index.js",
      "description": "Congrats on following me through this complex architecture! I hope that's a bit clearer now that it was a while ago!",
      "line": 1
    }
  ],
  "ref": "main"
}
